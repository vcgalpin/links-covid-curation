# 20210621: first attempt, quite comprehensive
# 20220815: further code improvement

# what's missing
#    see comments inline, if any 
#    See History functionality not implemented

open import DatabaseTables;
open import Utilities;

open import Mvu;
open import MvuHTML;
open import MvuAttrs;

import Template;

  typename WeekSummary = (weekdate:String,
                          mods:[(file_id:Int,weekmod:String,weekdate:String,
                                 accepted_updates:Int,rejected_updates:Int,
                                 data_items:Int,time_from:DateTime,time_to:DateTime)],
                          showWeekDetails: Bool,
                          details:[(subcat:Int,weekdate:String,count:Int,
                                    decision_timetime:DateTime,
                                    file_id:Int,weekmod:String,
                                    valid_from:DateTime,valid_to:DateTime,
                                    subcat_name:String,cat:String)]
                           );

  typename Model = (resultsText: String, resultsFocus: Bool, summary: [WeekSummary],
                    detailWeek: String);

  typename Message = [| Cancel | Continue | SeeDetails: String | HideDetails: String |
                        SeeHistory: (String,String) |];

#============= DB FUNS
  
  fun getWeeks () server {
    var cw = query nested {for (x <- ttCurrent(week))
               where (not(x.all_zero))
                 #orderby (x.weekdate) # gives runtime error
                 [(weekdate=x.weekdate,showWeekDetails=false,details=[],mods= 
                   for (y <-t- week) for (w <-- csv_file)
                     where (x.weekdate==ttData(y).weekdate &&
                            ttData(y).file_id==w.file_id)
                       orderby (ttFrom(y))
                       [(weekdate=x.weekdate, file_id=ttData(y).file_id, 
                         weekmod=w.last_weekdate,
                         accepted_updates=ttData(y).accepted_updates,
                         rejected_updates=ttData(y).rejected_updates,
                         data_items=ttData(y).data_items,
                         time_from=ttFrom(y),time_to=ttTo(y) )] ) ]};
    # sort list
    for (x <- cw) orderby (x.weekdate) [x]
  }

  fun getDetailsByWeek (w) server {
    query nested {for (x <-v- covid_data) for (y <-- subcategory) for (z <-- csv_file) 
      where (vtData(x).weekdate == w && z.file_id == vtData(x).file_id && 
             vtData(x).subcat == y.subcat && z.last_weekdate<>vtData(x).weekdate)
        orderby (z.last_weekdate,vtData(x).weekdate,vtData(x).subcat)
          [(subcat=vtData(x).subcat,weekdate=vtData(x).weekdate,
            count=vtData(x).count,file_id=vtData(x).file_id,
            decision_timetime=vtData(x).decision_time,weekmod=z.last_weekdate,
            valid_from=vtFrom(x),valid_to=vtTo(x),subcat_name=y.subcat_name,cat=y.cat) ]}
  }

#============= UPDT

  sig updt : (Message, Model) ~> Model
  fun updt(msg, model) {
    fun updateDetails(w,s) {
      if (s.weekdate <> w) { # the week chosen for show or hide isn't this week
        s
      } else {
        ((s with showWeekDetails=not(s.showWeekDetails))  # toggle show value
         with details=if (s.details<>[]) {                # if details are empty
                        s.details                         # get them else they
                      } else {                            # are already present
                        getDetailsByWeek(s.weekdate)
                      }) 
      }
    }

    switch(msg) {
      case Cancel -> model
      case Continue -> model
      case SeeDetails(w) -> (model with summary=map(curry(updateDetails)(w),model.summary))
      case HideDetails(w) -> (model with summary=map(curry(updateDetails)(w),model.summary))
      case SeeHistory(a,b) -> model
    }
  }

#============= VIEW

  sig view : (Model) ~> MvuHTML.HTML(Message)
  fun view(model){

    var enabledAttr =
      if (not(model.resultsFocus)) {
        a0
      } else {
        attr("disabled", "disabled")
      };

    fun renderModel(model) {

      fun panel(name, contents) {
        div(class("row mt-3"),
          div(class("col-sm"),
            div(class("card"),
              div(class("card-header"), textNode(name)) +*
              div(class("card-body"), contents))))
      }

## ========== Information for each week

      fun renderWeekPanels () {
        fun renderWeek (wc) {
          fun renderDetailsTable (r) {
           fun renderDetailRow (x) {
              tr(a0,
              td(a0, textNode(x.weekmod)) +*
              td(a0, textNode(x.cat)) +* 
              td(a0, textNode(x.subcat_name)) +* 
              td(a0, textNode({if (x.valid_from==beginningOfTime && x.valid_from==x.valid_to) 
                      {"Rejected"} else {"Accepted"}})) +*
              td(a0,
                     button(type("button") +@ class("btn btn-primary") +@
                       #onClick(fun() { Continue }), textNode("See history"))))
                       onClick(fun() { SeeHistory(intToString(x.subcat),x.weekdate) }), 
                                       textNode("See history"))))
            }
            var rows = MvuHTML.concatMap(renderDetailRow, r);
            #
            h5(class("card-title"),h0) +*
            table_(class("table table-bordered"),
              thead(a0,
                tr(a0,
                  th(a0, textNode("Week of modification")) +*
                  th(a0, textNode("Category")) +*
                  th(a0, textNode("Subcategory")) +*
                  th(a0, textNode("Decision")) +*
                    th(style("width: 14%"), textNode(""))
                 )) +*
              tbody(a0, rows))
           }

          var renderDetailsPanel = if (wc.showWeekDetails) {
             div(a0, button(type("button") +@ class("btn btn-primary") +@
               onClick(fun() { HideDetails(wc.weekdate) }), textNode("Hide details"))) +*     
             div(a0,renderDetailsTable(wc.details))
               } else {
             div(a0, button(type("button") +@ class("btn btn-primary") +@
               onClick(fun() { SeeDetails(wc.weekdate) }), textNode("See details")))
          };

          fun renderWeekTable (r) {
            fun renderWeekRow (x) {
              tr(a0,
              td(a0, textNode(show(x.time_from))) +*
              td(a0, textNode(intToString(x.accepted_updates))) +*
              td(a0, textNode(intToString(x.rejected_updates))) +* 
              td(a0, textNode(x.weekmod)) +*
              td(a0, h0)
              )
            }
            var rows = MvuHTML.concatMap(renderWeekRow, r);
            #
            h5(class("card-title"),h0) +*
            table_(class("table table-bordered"),
              thead(a0,
                tr(a0,
                  th(a0, textNode("Date")) +*
                  th(a0, textNode("Accepted updates")) +*
                  th(a0, textNode("Rejected updates")) +*
                  th(a0, textNode("Week of modification")) +*
                  th(style("width: 16%"), textNode(""))
                 )) +*
              tbody(a0, rows))
          }
          var acc = fold_left(fun(x,y){x+y.accepted_updates},0,wc.mods);
          var rej = fold_left(fun(x,y){x+y.rejected_updates},0,wc.mods);

          if (acc+rej==0) {
            var display_str = "For this week, there are <b>"^^intToString(hd(wc.mods).data_items)^^
              "</b> data items, added in the week of "^^hd(wc.mods).weekmod^^
              ".<br /> In total, there have been <b>"
              ^^intToString(acc)^^
              "</b> accepted updates and <b>"
              ^^intToString(rej)^^
              "</b> rejected updates.<br /> ";
            panel("Week "^^wc.weekdate,
              unescapedTextNode(display_str))
          } else {  
            var display_str = "For this week, there are <b>"^^intToString(hd(wc.mods).data_items)^^
              "</b> data items, added in the week of "^^hd(wc.mods).weekmod^^
              ".<br /> In total, there have been <b>"
              ^^intToString(acc)^^
              "</b> accepted updates and <b>"
              ^^intToString(rej)^^
              "</b> rejected updates. This week has the following update history.<br /> ";
            panel("Week "^^wc.weekdate,
              unescapedTextNode(display_str) +* renderWeekTable(tl(wc.mods)) +* renderDetailsPanel)
          }
        }
        # 
        panel("Details of data modifications by week",
              MvuHTML.concatMap(renderWeek,model.summary))
      }
      #
      var weekPanels = renderWeekPanels();
      div(class("container"),
        h5(class("title"), textNode("Provenance: weeks")) +* weekPanels)
    }
    renderModel(model)
  }

#============= MAIN
  
  fun mainPage() {
    var initialModel = (resultsText = "", resultsFocus = false, 
                        summary = getWeeks(), detailWeek = "");   
    runSimple("placeholder", initialModel, view, updt);
    Template.template()
  }

  fun main() {
    addRoute("/", fun(_) { mainPage() });
    addStaticRoute("/css", "css", [("css", "text/css")]);
    addStaticRoute("/js", "js", [("js", "text/javascript")]);
    serveWebsockets();
    servePages()
}

main()

